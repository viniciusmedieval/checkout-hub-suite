
import { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { toast } from "sonner";
import { supabase, getSupabaseClient } from "@/lib/supabase";

interface AutoTestRunnerProps {
  onComplete?: () => void;
}

export const AutoTestRunner = ({ onComplete }: AutoTestRunnerProps) => {
  const navigate = useNavigate();
  const [testStatus, setTestStatus] = useState<"initializing" | "running" | "completed" | "failed">("initializing");
  
  useEffect(() => {
    const runTest = async () => {
      try {
        setTestStatus("running");
        console.log("üîÑ AutoTestRunner - Iniciando teste autom√°tico");
        console.log("üîÑ AutoTestRunner - Valores do teste:");
        console.log("  - cor_fundo: #FF0000");
        console.log("  - cor_texto: #FFFFFF");
        console.log("  - texto_botao: Finalizar Compra");
        
        toast.info("Iniciando teste autom√°tico de configura√ß√£o...", {
          description: "Testando salvamento com valores predefinidos"
        });
        
        // Simplificar verifica√ß√£o da conex√£o Supabase para evitar erros de parsing
        try {
          console.log("üîÑ AutoTestRunner - Verificando conex√£o com Supabase...");
          
          const client = await getSupabaseClient();
          if (!client) {
            throw new Error("N√£o foi poss√≠vel inicializar o cliente Supabase");
          }
          
          // Consulta simples para verificar a conex√£o
          const { data: connectionCheckData, error: connectionCheckError } = await client
            .from('config_checkout')
            .select('id')
            .limit(1);
            
          if (connectionCheckError) {
            console.error("‚ùå AutoTestRunner - Erro ao verificar conex√£o:", connectionCheckError);
            throw new Error(`Erro de conex√£o: ${connectionCheckError.message}`);
          }
          
          console.log("‚úÖ AutoTestRunner - Conex√£o com Supabase verificada com sucesso:", connectionCheckData);
          
          // Redirecionar para p√°gina de configura√ß√£o com par√¢metro de teste
          console.log("üîÑ AutoTestRunner - Redirecionando para p√°gina de configura√ß√£o com autotest=true");
          navigate("/configuracao?autotest=true");
          
          // Definir um timeout para garantir que o status seja alterado
          setTimeout(() => {
            console.log("‚úÖ AutoTestRunner - Teste iniciado com sucesso na p√°gina de configura√ß√£o");
            setTestStatus("completed");
            
            if (onComplete) {
              onComplete();
            }
          }, 1000);
        } catch (connError: any) {
          console.error("‚ùå AutoTestRunner - Falha na verifica√ß√£o da conex√£o:", connError);
          toast.error(`Falha na conex√£o com o banco de dados: ${connError.message}`);
          setTestStatus("failed");
          if (onComplete) onComplete();
        }
      } catch (error: any) {
        setTestStatus("failed");
        console.error("‚ùå Erro ao executar teste autom√°tico:", error);
        toast.error(`Erro ao executar teste autom√°tico: ${error instanceof Error ? error.message : "Erro desconhecido"}`);
        
        if (onComplete) {
          onComplete();
        }
      }
    };
    
    // Executar o teste imediatamente
    runTest();
  }, [navigate, onComplete]);
  
  return null; // Este componente n√£o renderiza nada
};
