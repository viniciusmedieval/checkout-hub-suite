
import { useState, useCallback } from "react";
import { ConfigCheckout } from "@/lib/types/database-types";
import { toast } from "sonner";

export const useConfigActions = (
  config: ConfigCheckout,
  setConfig: React.Dispatch<React.SetStateAction<ConfigCheckout>>,
  handleSaveConfig: () => Promise<ConfigCheckout | null>,
  hasUnsavedChanges: () => boolean,
  reloadConfig: () => Promise<ConfigCheckout | null>
) => {
  const [isSaveAttempted, setIsSaveAttempted] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [isTestSaving, setIsTestSaving] = useState(false);
  const [isAutoTestRunning, setIsAutoTestRunning] = useState(false);

  console.log("üîÑ useConfigActions hook inicializado", { 
    configId: config?.id, 
    hasUnsavedChanges: hasUnsavedChanges() 
  });

  const onSaveClick = useCallback(async () => {
    console.log("üîÑ onSaveClick iniciado");
    
    // Verificar se h√° altera√ß√µes para salvar
    if (!hasUnsavedChanges()) {
      console.log("‚ÑπÔ∏è Sem altera√ß√µes para salvar");
      toast.info("N√£o h√° altera√ß√µes para salvar");
      return;
    }

    try {
      setIsSaveAttempted(true);
      console.log("üîÑ Tentando salvar configura√ß√£o...");
      
      const result = await handleSaveConfig();
      
      if (result) {
        console.log("‚úÖ Configura√ß√£o salva com sucesso:", result);
        setSaveSuccess(true);
        toast.success("Configura√ß√µes salvas com sucesso!");
      } else {
        console.error("‚ùå Erro ao salvar configura√ß√µes: resultado nulo");
        toast.error("Erro ao salvar configura√ß√µes. Tente novamente.");
      }
    } catch (error) {
      console.error("‚ùå Exce√ß√£o ao salvar configura√ß√µes:", error);
      toast.error("Erro ao salvar: " + (error instanceof Error ? error.message : "Erro desconhecido"));
    } finally {
      console.log("üîÑ Finalizando tentativa de salvamento");
      setTimeout(() => {
        setIsSaveAttempted(false);
        // Resetar o estado de sucesso ap√≥s alguns segundos
        if (saveSuccess) {
          setTimeout(() => setSaveSuccess(false), 3000);
        }
      }, 1000);
    }
  }, [hasUnsavedChanges, handleSaveConfig, saveSuccess]);

  const runTestSave = useCallback(async () => {
    console.log("üîÑ runTestSave iniciado");
    setIsTestSaving(true);
    
    try {
      console.log("üîÑ Iniciando teste autom√°tico de salvamento de configura√ß√£o");
      console.log("üß™ Valores de teste configurados:");
      console.log("  cor_fundo: #FF0000 (vermelho)");
      console.log("  cor_texto: #FFFFFF (branco)");
      console.log("  texto_botao: Finalizar Compra");

      // Backup original config
      const originalConfig = { ...config };
      console.log("üîÑ Backup da configura√ß√£o original criado");

      // Set test values
      console.log("üîÑ Definindo valores de teste na configura√ß√£o");
      setConfig(prevConfig => {
        const testConfig = {
          ...prevConfig,
          cor_fundo: "#FF0000",
          cor_texto: "#FFFFFF",
          texto_botao: "Finalizar Compra",
        };
        console.log("üîÑ Nova configura√ß√£o de teste:", testConfig);
        return testConfig;
      });

      // Use setTimeout to ensure state has updated before saving
      setTimeout(async () => {
        try {
          console.log("üîÑ Tentando salvar configura√ß√£o de teste...");
          const savedConfig = await handleSaveConfig();
          
          if (savedConfig) {
            console.log("‚úÖ Teste autom√°tico - Configura√ß√£o salva com sucesso:", savedConfig);
            toast.success("Teste: Configura√ß√£o salva com sucesso!");
            setIsSaveAttempted(true);
            setSaveSuccess(true);
            
            // Resetar estados ap√≥s alguns segundos
            setTimeout(() => {
              setIsSaveAttempted(false);
              setSaveSuccess(false);
            }, 3000);
          } else {
            console.error("‚ùå Teste falhou ao salvar configura√ß√£o: resultado nulo");
            toast.error("Teste: Erro ao salvar configura√ß√£o");
            
            // Restore original config
            console.log("üîÑ Restaurando configura√ß√£o original ap√≥s falha");
            setConfig(originalConfig);
          }
        } catch (error) {
          console.error("‚ùå Teste falhou com erro", error);
          toast.error("Teste falhou: " + (error instanceof Error ? error.message : "Erro desconhecido"));
          
          // Restore original config
          console.log("üîÑ Restaurando configura√ß√£o original ap√≥s erro");
          setConfig(originalConfig);
        } finally {
          setIsTestSaving(false);
        }
      }, 500);
    } catch (error) {
      console.error("‚ùå Erro ao executar teste", error);
      toast.error("Erro ao executar teste: " + (error instanceof Error ? error.message : "Erro desconhecido"));
      setIsTestSaving(false);
    }
  }, [config, setConfig, handleSaveConfig]);

  const runAutomaticTest = useCallback(async () => {
    console.log("üîÑ runAutomaticTest iniciado");
    setIsAutoTestRunning(true);
    
    try {
      console.log("üîÑ Iniciando teste de configura√ß√£o autom√°tico");
      
      // Backup original config
      const originalConfig = { ...config };
      console.log("üîÑ Backup da configura√ß√£o original criado");
      
      // Set test values
      console.log("üîÑ Definindo valores de teste na configura√ß√£o");
      setConfig(prev => {
        const testConfig = {
          ...prev,
          cor_fundo: "#FF0000",
          cor_texto: "#FFFFFF",
          texto_botao: "Finalizar Compra"
        };
        console.log("üîÑ Nova configura√ß√£o de teste:", testConfig);
        return testConfig;
      });
      
      // Wait for state update
      setTimeout(async () => {
        try {
          console.log("üîÑ Estado atualizado, tentando salvar configura√ß√£o de teste");
          const result = await handleSaveConfig();
          
          if (result) {
            console.log("‚úÖ Teste autom√°tico conclu√≠do com sucesso!", result);
            toast.success("Teste autom√°tico: Configura√ß√£o salva com sucesso!");
            setIsSaveAttempted(true);
            setSaveSuccess(true);
            
            // Resetar estados ap√≥s alguns segundos
            setTimeout(() => {
              setIsSaveAttempted(false);
              setSaveSuccess(false);
            }, 3000);
          } else {
            console.error("‚ùå Teste autom√°tico falhou ao salvar: resultado nulo");
            toast.error("Teste autom√°tico: Erro ao salvar configura√ß√£o");
            
            // Restore original config
            console.log("üîÑ Restaurando configura√ß√£o original ap√≥s falha");
            setConfig(originalConfig);
          }
        } catch (error) {
          console.error("‚ùå Teste autom√°tico falhou com erro", error);
          toast.error("Teste autom√°tico falhou: " + (error instanceof Error ? error.message : "Erro desconhecido"));
          
          // Restore original config
          console.log("üîÑ Restaurando configura√ß√£o original ap√≥s erro");
          setConfig(originalConfig);
        } finally {
          setIsAutoTestRunning(false);
        }
      }, 500);
    } catch (error) {
      console.error("‚ùå Erro no teste autom√°tico", error);
      toast.error("Erro no teste autom√°tico: " + (error instanceof Error ? error.message : "Erro desconhecido"));
      setIsAutoTestRunning(false);
    }
  }, [config, setConfig, handleSaveConfig]);

  return {
    isSaveAttempted,
    saveSuccess,
    isTestSaving,
    isAutoTestRunning,
    onSaveClick,
    runTestSave,
    runAutomaticTest
  };
};
