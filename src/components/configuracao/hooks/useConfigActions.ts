
import { useState, useCallback } from "react";
import { ConfigCheckout } from "@/lib/types/database-types";
import { toast } from "sonner";

export const useConfigActions = (
  config: ConfigCheckout,
  setConfig: React.Dispatch<React.SetStateAction<ConfigCheckout>>,
  handleSaveConfig: () => Promise<ConfigCheckout | null>,
  hasUnsavedChanges: () => boolean,
  reloadConfig: () => Promise<ConfigCheckout | null>
) => {
  const [isSaveAttempted, setIsSaveAttempted] = useState(false);
  const [saveSuccess, setSaveSuccess] = useState(false);
  const [isTestSaving, setIsTestSaving] = useState(false);
  const [isAutoTestRunning, setIsAutoTestRunning] = useState(false);

  const onSaveClick = useCallback(async () => {
    if (!hasUnsavedChanges()) {
      toast.info("N√£o h√° altera√ß√µes para salvar");
      return;
    }

    setIsSaveAttempted(true);
    const result = await handleSaveConfig();
    setSaveSuccess(!!result);
    
    if (result) {
      toast.success("Configura√ß√µes salvas com sucesso!");
    } else {
      toast.error("Erro ao salvar configura√ß√µes. Tente novamente.");
    }
  }, [hasUnsavedChanges, handleSaveConfig]);

  const runTestSave = useCallback(async () => {
    setIsTestSaving(true);
    try {
      console.log("üîÑ Iniciando teste autom√°tico de salvamento de configura√ß√£o");
      console.log("üß™ Valores de teste configurados:");
      console.log("  cor_fundo: #FF0000 (vermelho)");
      console.log("  cor_texto: #FFFFFF (branco)");
      console.log("  texto_botao: Finalizar Compra");

      // Backup original config
      const originalConfig = { ...config };

      // Set test values
      setConfig(prevConfig => ({
        ...prevConfig,
        cor_fundo: "#FF0000",
        cor_texto: "#FFFFFF",
        texto_botao: "Finalizar Compra",
      }));

      // Try to save directly - this might fail if we don't wait for state to update
      try {
        const savedConfig = await handleSaveConfig();
        if (savedConfig) {
          console.log("‚úÖ Teste autom√°tico - Configura√ß√£o salva com sucesso:", savedConfig);
          toast.success("Teste: Configura√ß√£o salva com sucesso!");
          setIsSaveAttempted(true);
          setSaveSuccess(true);
          return;
        }
      } catch (error) {
        console.error("‚ùå N√£o foi poss√≠vel salvar a configura√ß√£o de teste diretamente", error);
      }

      // If direct save fails, we need to wait for state update and try again
      console.log("üîÑ Iniciando teste autom√°tico de salvamento");
      console.log("----------------------------------------------");
      
      // This will happen on the next render after state update
      setTimeout(async () => {
        try {
          const result = await handleSaveConfig();
          if (result) {
            console.log("‚úÖ Teste conclu√≠do com sucesso!");
            toast.success("Teste: Configura√ß√£o salva com sucesso!");
            setIsSaveAttempted(true);
            setSaveSuccess(true);
          } else {
            console.error("‚ùå Teste falhou ao salvar configura√ß√£o");
            toast.error("Teste: Erro ao salvar configura√ß√£o");
            
            // Restore original config
            setConfig(originalConfig);
          }
        } catch (error) {
          console.error("‚ùå Teste falhou com erro", error);
          toast.error("Teste falhou: " + (error instanceof Error ? error.message : "Erro desconhecido"));
          
          // Restore original config
          setConfig(originalConfig);
        } finally {
          setIsTestSaving(false);
        }
      }, 500);
    } catch (error) {
      console.error("‚ùå Erro ao executar teste", error);
      toast.error("Erro ao executar teste: " + (error instanceof Error ? error.message : "Erro desconhecido"));
      setIsTestSaving(false);
    }
  }, [config, setConfig, handleSaveConfig]);

  const runAutomaticTest = useCallback(async () => {
    setIsAutoTestRunning(true);
    try {
      console.log("üîÑ Iniciando teste de configura√ß√£o autom√°tico");
      
      // Backup original config
      const originalConfig = { ...config };
      
      // Set test values
      setConfig(prev => ({
        ...prev,
        cor_fundo: "#FF0000",
        cor_texto: "#FFFFFF",
        texto_botao: "Finalizar Compra"
      }));
      
      // Wait for state update
      setTimeout(async () => {
        try {
          console.log("üîÑ Estado atualizado, tentando salvar configura√ß√£o de teste");
          const result = await handleSaveConfig();
          
          if (result) {
            console.log("‚úÖ Teste autom√°tico conclu√≠do com sucesso!", result);
            toast.success("Teste autom√°tico: Configura√ß√£o salva com sucesso!");
            setIsSaveAttempted(true);
            setSaveSuccess(true);
          } else {
            console.error("‚ùå Teste autom√°tico falhou ao salvar");
            toast.error("Teste autom√°tico: Erro ao salvar configura√ß√£o");
            
            // Restore original config
            setConfig(originalConfig);
          }
        } catch (error) {
          console.error("‚ùå Teste autom√°tico falhou com erro", error);
          toast.error("Teste autom√°tico falhou: " + (error instanceof Error ? error.message : "Erro desconhecido"));
          
          // Restore original config
          setConfig(originalConfig);
        } finally {
          setIsAutoTestRunning(false);
        }
      }, 500);
    } catch (error) {
      console.error("‚ùå Erro no teste autom√°tico", error);
      toast.error("Erro no teste autom√°tico: " + (error instanceof Error ? error.message : "Erro desconhecido"));
      setIsAutoTestRunning(false);
    }
  }, [config, setConfig, handleSaveConfig]);

  return {
    isSaveAttempted,
    saveSuccess,
    isTestSaving,
    isAutoTestRunning,
    onSaveClick,
    runTestSave,
    runAutomaticTest
  };
};
